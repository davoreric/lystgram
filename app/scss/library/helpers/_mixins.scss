/* Helpers
*******************************************************/
@mixin font-face( $font_name ) {
	font-family: $font_name;
	src:url('../font/'+$font_name+'.eot?v=3');
	src:url('../font/'+$font_name+'.eot?#iefix') format('embedded-opentype'),
		url('../font/'+$font_name+'.woff?v=3') format('woff'),
		url('../font/'+$font_name+'.ttf?v=3') format('truetype'),
		url('../font/'+$font_name+'.svg#'+$font_name) format('svg');
	font-weight: normal;
	font-style: normal;
}

@mixin default-icon-font( $font_name ) {
	font-family: $font_name;
	speak: none;
	font-style: normal;
	font-weight: normal;
	font-variant: normal;
	text-transform: none;
	line-height: 1;
	-webkit-font-smoothing: antialiased;
	-moz-osx-font-smoothing: grayscale;
}

@mixin cf {

	zoom:1;

	&:before,
	&:after	{ content:" "; display:table; }
	&:after	{ clear:both; }

}

@mixin default-button {

	display: inline-block;
	width: auto;
	height: auto;
	cursor: pointer;
	margin: 0;
	padding: 0;
	border: 0;
	background: none;
	&::-moz-focus-inner	{ padding:0; border:0; }

}

@mixin font-gradient-enable {
	-webkit-background-clip: text;
	-webkit-text-fill-color: transparent;
	-moz-background-clip: text;
	-moz-text-fill-color: transparent;
	background-clip: text;
	text-fill-color: transparent;
}

/* Truncate (3 dot cut text)
*******************************************************/
@mixin truncate( $truncation-boundary: 100% ) {
	max-width: $truncation-boundary;
	overflow: hidden;
	text-overflow: ellipsis;
	white-space: nowrap;
}

/* Hover and focus
*******************************************************/
@mixin hover {
	&:hover,
	&:focus {
		@content;
		outline: 0;
	}
}

/* Border radius
*******************************************************/
@mixin border-radius($value) {
    -webkit-border-radius: $value;
	-moz-border-radius: $value;
	border-radius: $value;
}

/* Box shadow
*******************************************************/
@mixin box-shadow($value) {
    -webkit-box-shadow: $value;
    -moz-box-shadow: $value;
    box-shadow: $value;
}

/* Rotate
*******************************************************/
@mixin rotate($value) {
    -webkit-transform: rotate($value);
    -moz-transform: rotate($value);
    transform: rotate($value);
}

/* Animation
*******************************************************/
@mixin transition_transform($duration: 300, $easing: ease-in-out ){
	-webkit-transition: -webkit-transform #{$duration}ms #{$easing};
	-moz-transition: -moz-transform #{$duration}ms #{$easing};
	-o-transition: -o-transform #{$duration}ms #{$easing};
	transition: transform #{$duration}ms #{$easing};
}

/* Opacity
*******************************************************/
@mixin opacity($opacity) {
	$opacity-ie: $opacity * 100;
	opacity:$opacity;
	filter:alpha(opacity=$opacity-ie);
}

/* rem
*******************************************************/
// Based on https://github.com/thoughtbot/bourbon/commit/71286444c2264e03426bbb5eb5295666ea0572f4
// Works for Bourbon 3.1.8
@mixin rem($property, $pxval, $base: $em-base) {
  @if not unitless($base) {
		$base: strip-units($base);
	}

	$unitless_values: ();
	@each $num in $pxval {
		@if not unitless($num) {
			@if unit($num) == "em" {
				$num: $num * $base;
			}

			$num: strip-units($num);
		}

		$unitless_values: append($unitless_values, $num);
	}
	$pxval: $unitless_values;

	$pixel_values: ();
	$rem_values: ();
	@each $value in $pxval {
		$pixel_value: $value * 1px;
		$pixel_values: append($pixel_values, $pixel_value);

		$rem_value: ($value / $base) * 1rem;
		$rem_values: append($rem_values, $rem_value);
	}

	#{$property}: $pixel_values;
	#{$property}: $rem_values;
}
